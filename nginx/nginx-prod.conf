# Configuration Nginx pour l'environnement de PRODUCTION
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048; # Nombre maximum de connexions par processus de travail
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuration de logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Optimisations
    # https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#:~:text=%3B%0A%20%20%20%20%23...%0A%7D-,Enable%20tcp_nopush,-Use%20the%20tcp_nopush
    sendfile on; 
    tcp_nopush on; 
    tcp_nodelay on;
    keepalive_timeout 30;
    client_max_body_size 10M;

    # Compression gzip
    # https://docs.nginx.com/nginx/admin-guide/web-server/compression/
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # ============ UPSTREAMS ============
    upstream auth_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server auth-backend:3443;
        keepalive 8;
    }

    upstream users_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server users-backend:3443; 
        keepalive 8;
    }

    upstream posts_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server posts-backend:3443; 
        keepalive 8;
    }

    upstream messages_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server messages-backend:3443; 
        keepalive 8;
    }


    upstream images_backend_service {
        least_conn; # Redirection vers le serveur avec le moins de connexions actives
        server images-backend:3443;
        keepalive 8;
    }

    # ============ REDIRECTION HTTP → HTTPS ============
    server {
        listen 80;
        server_name _;
        
        # Redirection forcée vers HTTPS si on accède via HTTP
        return 301 https://$server_name:8443$request_uri;
    }

    # ============ SERVEUR PRINCIPAL HTTPS ============
    server {
        listen 443 ssl;
        http2 on;
        server_name _;


        # Configuration SSL
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Headers de sécurité renforcés pour la production
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; frame-ancestors 'none'; form-action 'self';" always;
        add_header 'Access-Control-Allow-Origin' 'https://192.168.1.177:8443' always;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST,';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
        


        # ============ ROUTE D'AUTHENTIFICATION ============
        location = /auth/authenticate {
            internal;
            proxy_pass https://auth_backend_service/api/auth/authenticate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Authorization $http_authorization;
            proxy_ssl_verify off;
            include /etc/nginx/proxy_params.conf;
        }


        # ============ GESTION DES ERREURS D'AUTHENTIFICATION ============
        location @error401 {
            add_header Content-Type application/json always;
            return 401 '{"error":"Unauthorized", "message":"Token Bearer requis"}';
        }

        location @error403 {
            add_header Content-Type application/json always;
            return 403 '{"error":"Forbidden", "message":"Accès interdit"}';
        }


        # ============ API ROUTES ============
        
        # 1 service = 1 location
        location /api/auth/ {            
            proxy_pass https://auth_backend_service/api/auth/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf;# Utiliser les paramètres de proxy définis dans un fichier séparé
            proxy_ssl_verify off;# Désactiver la vérification SSL, osef si c'est un certificat auto-signé
            
            proxy_set_header X-Service-Name "auth"; # Indiquer le nom du service pour le logging
        }


        location /api/users/ {
            # Vérification de l'authentification
            auth_request /auth/authenticate;
            
            # Gestion des erreurs d'authentification
            error_page 401 = @error401;
            error_page 403 = @error403;


            # Variables pour capturer les headers de l'auth
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;


            proxy_pass https://users_backend_service/api/users/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf; # Utiliser les paramètres de proxy définis dans un fichier séparé
            proxy_ssl_verify off; # Désactiver la vérification SSL, osef si c'est un certificat auto-signé 
            
            # Transférer les headers d'authentification au service
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-Service-Name "users"; # Indiquer le nom du service pour le logging
            
        }


        location /api/posts/ {          
            # Vérification de l'authentification
            auth_request /auth/authenticate;
            
            # Gestion des erreurs d'authentification
            error_page 401 = @error401;
            error_page 403 = @error403;

            
            # Variables pour capturer les headers de l'auth
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;


            proxy_pass https://posts_backend_service/api/posts/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf; # Utiliser les paramètres de proxy définis dans un fichier séparé
            proxy_ssl_verify off; # Désactiver la vérification SSL, osef si c'est un certificat auto-signé 
            

            # Transférer les headers d'authentification au service
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-Service-Name "posts"; # Indiquer le nom du service pour le logging
            
        }


        location /api/messages/ {
            # Vérification de l'authentification
            auth_request /auth/authenticate;
            
            # Gestion des erreurs d'authentification
            error_page 401 = @error401;
            error_page 403 = @error403;

            
            # Variables pour capturer les headers de l'auth
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;

            proxy_pass https://messages_backend_service/api/messages/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf; # Utiliser les paramètres de proxy définis dans un fichier séparé
            proxy_ssl_verify off; # Désactiver la vérification SSL, osef si c'est un certificat auto-signé 
            
            # Transférer les headers d'authentification au service
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-Username $username; 
            proxy_set_header X-Service-Name "messages"; # Indiquer le nom du service pour le logging
        }


        location /api/images/ {            
            proxy_pass https://images_backend_service/api/images/; # Redirection vers le service backend
            include /etc/nginx/proxy_params.conf; # Utiliser les paramètres de proxy définis dans un fichier séparé
            proxy_ssl_verify off; # Désactiver la vérification SSL, osef si c'est un certificat auto-signé 
            
            proxy_set_header X-Service-Name "images"; # Indiquer le nom du service pour le logging
            
        }

        # ============ FRONTEND STATIQUE (Build de production) ============
        
        # Assets statiques avec cache long
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            root /app/dist;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Fallback si le fichier n'existe pas
            try_files $uri =404;
        }

        # Route principale - SPA (Single Page Application)
        location / {
            root /app/dist;
            index index.html;
            
            # Support pour le routing côté client (React Router)
            try_files $uri $uri/ /index.html;
            
            # Headers pour les fichiers HTML
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # ============ HEALTH CHECK ============
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Bloquer l'accès aux fichiers sensibles
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}